
---
layout: default
title: Access Control Tutorial
category: tutorials
section: tutorials
index-order: 305
sidebar: sidebars/accordion-toc0.md
excerpt: "The ACL tutorial will walk you through the steps to get familiar with Access Control rules in {{site.data.conrefs.composer_full}}."
---

# Access Controls in {{site.data.conrefs.composer_full}} Tutorial

Access control and authorization is a very important part of {{site.data.conrefs.composer_full}} and the security architecture of a business network on the blockchain. Hyperledger Composer enables an administrator control what resources or data a participant, or indeed participant role - is authorized to see or do, in a business network.

Specifically, access control rules fall into two main areas: 

- authority to access system, network or administrative resources and operations via System ACLs ;  and 
- authority to access resources or perform operations (like Create, Read, Update assets) within the business network itself,  via business domain ACLs. 

This tutorial will enable you to use the 'Commodity Trading' sample network in the online Playground to try out some simple and conditional access rules. In doing so, you will interact with the sample network as various identities - ultimately it is the users of the blockchain that we want to control and we'll see how to achieve this in this tutorial. We'll also see how a Participant role can be used to control access, where multiple identities are mapped to a designated Participant role.

You can if you wish, implement these same rules in your local Fabric Commodity Trading business network from the [Developer Tutorial](https://hyperledger.github.io/composer/tutorials/developer-tutorial.html) if you wish.


## Prerequisites

None - just an internet connection, which you have right now :-) 

If you plan on trying this out in your local Development environment, complete the  [Developer Tutorial](https://hyperledger.github.io/composer/tutorials/developer-tutorial.html) first.

## Step One: Access the Online Playground and select your business network

We'll use a sample, pre-built business network (`trade-network`)from the Composer sample networks repository. 

1. Go to the [Online Playground](https://composer-playground.mybluemix.net/login) and if necessary clear local storage when prompted. Accept the Welcome logo, you are ready to start.

2. Click on the `Deploy a new business network` modal / icon.

3. Scroll down and click on the `trade-network` sample - when you scroll back up,  it should populate name, description and network admin card fields for you.

4. With the Deploy button active (confirm that the name is `trade-network`) - click on **Deploy** to deploy the business network.

6. Lastly, click on 'Connect' to connect to the deployed business network (the default id - its shown top right).

7. The 'Trade Network' README file should be active and you can see the components of the business network listed in the left columnn - one of these is the ACLs file `permissions.acl` which controls the access to resources. Out of the box, the sample business networks have 'all access' turned on, which would of course, ultimately be different to that for a production style environment.

### Create Trader Participants 

1. Click on the 'Test' tab near the top of the screen. This is where we create sample Trader Participants 

2. Click on `Trader` on the left - Create a Participant (top right) as follows - the example below is 'TRADER1', '

    {
      "$class": "org.acme.trading.Trader",
      "tradeId": "TRADER1",
      "firstName": "Jenny",
      "lastName": "Jones"
    }
    
    
    
3. Repeat step 2 and create 5 additional `Trader` participants ('TRADER2' through 'TRADER6') using the sample data above (change the names as appropriate). We have provided 'TRADER2', and 'TRADER3' as an example below.

    
    {
     "$class": "org.acme.trading.Trader",
      "tradeId": "TRADER2",
      "firstName": "Jack",
      "lastName": "Sock"
    }
  
    
    {
      "$class": "org.acme.trading.Trader",
      "tradeId": "TRADER3",
      "firstName": "Rainer",
      "lastName": "Valens"
    }
    
### Create Commodity Assets

1. Still in the 'Test' screen, create some Commodity records by selecting 'Commodity' on the left - the ownership (`owner` field) relates back to the 'Trader' participant for the purposes of this tutorial.
   
   1st record:
   
    {
      "$class": "org.acme.trading.Commodity",
      "tradingSymbol": "EMA",
      "description": "Corn",
      "mainExchange": "EURONEXT",
      "quantity": 10,
      "owner": "resource:org.acme.trading.Trader#TRADER1"
    }
    
     2nd record:

    {
      "$class": "org.acme.trading.Commodity",
      "tradingSymbol": "CC",
      "description": "Cocoa",
      "mainExchange": "ICE",
      "quantity": 80,
      "owner": "resource:org.acme.trading.Trader#TRADER2"
    }
    
    3rd record:
    
    {
      "$class": "org.acme.trading.Commodity",
      "tradingSymbol": "HO",
      "description": "Heating Oil",
      "mainExchange": "NYMEX",
      "quantity": 40,
      "owner": "resource:org.acme.trading.Trader#TRADER3"
    }
    
    4th record:
    
    {
      "$class": "org.acme.trading.Commodity",
      "tradingSymbol": "HG",
      "description": "Copper",
      "mainExchange": "COMEX",
      "quantity": 100,
      "owner": "resource:org.acme.trading.Trader#TRADER4"
    }
    
    5th record:
    
    {
      "$class": "org.acme.trading.Commodity",
      "tradingSymbol": "SM",
      "description": "Soybean Meal",
      "mainExchange": "CBOT",
      "quantity": 70,
      "owner": "resource:org.acme.trading.Trader#TRADER5"
    }
    
    6th record:
    
    {
      "$class": "org.acme.trading.Commodity",
      "tradingSymbol": "AG",
      "description": "Silver",
      "mainExchange": "CBOT",
      "quantity": 60,
      "owner": "resource:org.acme.trading.Trader#TRADER6"
    }

### Create Identities to test ACLs

Next, lets create some trader identities - we need to issue identities for the Traders (TRADER1 - 6) so that we can test those identities' access (each being mapped to their respective Trader participant record)

1. Click on 'admin` (top right) and select 'ID Registry' from the drop-down
2. Click 'Issue new ID' top right and it will present an 'Issue New Identity' dialog
3. In the ID Name field - enter `tid1` as the identity we'll use for TRADER1
4. In the Participant field - enter `TRADER1` to search for the fully-qualified Participant - and select the fully-qualified participant name
5. Click on 'Create New'  to continue.

Repeat the 'Issue new ID' sequence (step 2 through 5 above) for identities `tid2`, `tid3`, `tid4`, `tid5` and `tid6` respectively, mapping these to their respective TRADER participants.
  
 Now we're ready to start creating our access control rules.


### Add basic our Commodity Trading ACL rules

The standard 'Commodity Trade network' sample network you deployed comes with standard System and Network ACL rules, that govern the administrators of the business network.

But we want to add some Trading-specific access control rules - let's start by defining what we want to achieve first ! The golden rule with ACLs is that resources are by default implicitly 'denied' to Participants inside a business network, unless explicitly ALLOWED.

#### Everyday activities - rule objectives:

a. Traders cannot see or change other Trader's assets (Commodities) 
b. Allow Traders to modify their own assets (Commodities)
c. Only Participants of type 'Trader' can submit Trade smart contract transactions ie the 'Trade' transactions (there may be several transactions defined, over time in an 'live'/operational business network)

#### Historical records  - rule objectives:

a. Ensure Traders can only see the history of their own transactions instigated by them.
b. Allow a Participant of type REG (Regulator)the authority to see the history of all historical transactions committed by Traders


1. Go to the 'Define'  
