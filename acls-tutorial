
---
layout: default
title: Access Control Tutorial - Commodity Trading
category: tutorials
section: tutorials
index-order: 305
sidebar: sidebars/accordion-toc0.md
excerpt: "The ACL tutorial will walk you through the steps to get familiar with Access Control rules in {{site.data.conrefs.composer_full}}."
---

# Access Controls in {{site.data.conrefs.composer_full}} Tutorial

Access control and authorization is a very important part of {{site.data.conrefs.composer_full}} and the security architecture of a business network on the blockchain. Hyperledger Composer enables an administrator control what resources or data a participant, or indeed participant role - is authorized to see or do, in a business network. These participants can operate or transact in multiple member organisations and each will have their own access control requirements, whilst at the same time allowing controlled access that may be common to all or potentially specific to fewer parties on the same business network.  

This tutorial explores one such business network - the Commodity Trading network and shows examples of ACLs in action.

Access control rules (the 'glue' that defines ACLs) fall into two main areas: 

- authority to access system, network or administrative resources and operations via System ACLs ;  and 
- authority to access resources or perform operations (like Create, Read, Update assets) within the business network itself,  via business domain ACLs. 

The tutorial uses the online Playground to try out some simple and conditional access rules. In doing so, you will interact with the sample network as various identities - as ultimately,  it is the users of the blockchain that we want to control. We'll also see how a Participant role can be used to control access, where multiple identities can be mapped to a designated Participant role (such as a Regulator). Its important to note that in a real blockchain network, all operations, whether from a Node JS application, CLI or indeed REST operations are subject to and controlled by the ACLs that govern a business network.

Incidentally, you can also implement these same rules in an existing v1 Fabric. You just need to grab and deploy the sample Commodity Trading business network used in the [Developer Tutorial](https://hyperledger.github.io/composer/tutorials/developer-tutorial.html) if you wish.


## Prerequisites

None - just an internet connection, which you have right now :-) 

If you plan on trying this out in your local Development Fabric runtime, complete the  [Developer Tutorial](https://hyperledger.github.io/composer/tutorials/developer-tutorial.html) first.

## Step One: Access the Online Playground and select your business network

We'll use the sample business network (`trade-network`) sourced from the Composer sample networks repository. 

1. Go to the [Online Playground](https://composer-playground.mybluemix.net/login) and if necessary clear local storage when prompted. Accept the Welcome logo, you are ready to start.

2. Click on the `Deploy a new business network` modal / icon.

3. Scroll down and click on the `trade-network` sample - when you scroll back up,  it should populate name, description and network admin card fields for you.

4. With the Deploy button active (confirm that the name is `trade-network`) - click on **Deploy** to deploy the business network.

6. Lastly, click on 'Connect' to connect to the deployed business network (the default id - its shown top right).

7. The 'Trade Network' README file should be active and you can see the components of the business network listed in the left columnn - one of these is the ACLs file `permissions.acl` which controls the access to resources. Out of the box, the sample business networks have 'all access' turned on, which would of course, ultimately be different to that for a production style environment.

### Create Trader Participants 

1. Click on the 'Test' tab near the top of the screen. This is where we create sample Trader Participants 

2. Click on `Trader` on the left - Create a Participant (top right) as follows - the example below is 'TRADER1', '

    {
      "$class": "org.acme.trading.Trader",
      "tradeId": "TRADER1",
      "firstName": "Jenny",
      "lastName": "Jones"
    }
    
    
    
3. Repeat step 2 and create 5 additional `Trader` participants ('TRADER2' through 'TRADER6') using the sample data above (change the names as appropriate). We have provided 'TRADER2', and 'TRADER3' as an example below.

    
    {
     "$class": "org.acme.trading.Trader",
      "tradeId": "TRADER2",
      "firstName": "Jack",
      "lastName": "Sock"
    }
  
    
    {
      "$class": "org.acme.trading.Trader",
      "tradeId": "TRADER3",
      "firstName": "Rainer",
      "lastName": "Valens"
    }
    
### Create Commodity Assets

1. Still in the 'Test' screen, create some Commodity records by selecting 'Commodity' on the left - the ownership (`owner` field) relates back to the 'Trader' participant for the purposes of this tutorial.
   
   1st record:
   
    {
      "$class": "org.acme.trading.Commodity",
      "tradingSymbol": "EMA",
      "description": "Corn",
      "mainExchange": "EURONEXT",
      "quantity": 10,
      "owner": "resource:org.acme.trading.Trader#TRADER1"
    }
    
     2nd record:

    {
      "$class": "org.acme.trading.Commodity",
      "tradingSymbol": "CC",
      "description": "Cocoa",
      "mainExchange": "ICE",
      "quantity": 80,
      "owner": "resource:org.acme.trading.Trader#TRADER2"
    }
    
    3rd record:
    
    {
      "$class": "org.acme.trading.Commodity",
      "tradingSymbol": "HO",
      "description": "Heating Oil",
      "mainExchange": "NYMEX",
      "quantity": 40,
      "owner": "resource:org.acme.trading.Trader#TRADER3"
    }
    
    4th record:
    
    {
      "$class": "org.acme.trading.Commodity",
      "tradingSymbol": "HG",
      "description": "Copper",
      "mainExchange": "COMEX",
      "quantity": 100,
      "owner": "resource:org.acme.trading.Trader#TRADER4"
    }
    
    5th record:
    
    {
      "$class": "org.acme.trading.Commodity",
      "tradingSymbol": "SM",
      "description": "Soybean Meal",
      "mainExchange": "CBOT",
      "quantity": 70,
      "owner": "resource:org.acme.trading.Trader#TRADER5"
    }
    
    6th record:
    
    {
      "$class": "org.acme.trading.Commodity",
      "tradingSymbol": "AG",
      "description": "Silver",
      "mainExchange": "CBOT",
      "quantity": 60,
      "owner": "resource:org.acme.trading.Trader#TRADER6"
    }

### Create Identities to test ACLs

Next, lets create some trader identities - we need to issue identities for the Traders (TRADER1 - 6) so that we can test those identities' access (each being mapped to their respective Trader participant record)

1. Click on 'admin` (top right) and select 'ID Registry' from the drop-down
2. Click 'Issue new ID' top right and it will present an 'Issue New Identity' dialog
3. In the ID Name field - enter `tid1` as the identity we'll use for TRADER1
4. In the Participant field - enter `TRADER1` to search for the fully-qualified Participant - and select the fully-qualified participant name
5. Click on 'Create New'  to continue.

Repeat the 'Issue new ID' sequence (step 2 through 5 above) for identities `tid2`, `tid3`, `tid4`, `tid5` and `tid6` respectively, mapping these to their respective TRADER participants.
  
 Now we're ready to start creating our access control rules.


### Add basic our Commodity Trading ACL rules

The standard 'Commodity Trade network' sample network you deployed comes with standard System and Network ACL rules, that govern the administrators of the business network.

But we want to add some Trading-specific access control rules - let's start by defining what we want to achieve first ! The golden rule with ACLs is that resources are by default implicitly 'DENIED' to Participants inside a business network, unless explicitly ALLOWED.

You will note from ACLs that certain 'system' rules are defined in the ACLs file, to allow participants to (for example) be able to use system operations such as writing to the system Historian registry.

#### Everyday activities - rule objectives:

1a. Traders can see and update their own profile only (participant record)
1b. Allow Traders access to all operations on their own assets (Commodities)

2. Restrict Participants of type 'Trader' can submit Trade smart contract transactions ie the 'Trade' transactions (as there may be several transactions defined, over time in an 'live'/operational business network)

#### Historical records  - rule objectives:

3. Ensure Traders can only see the history of their own transactions instigated by them.
4. Allow a Participant of type REG (Regulator)the authority to see the history of all historical transactions committed by Traders

It is important to note at this point that the namespace `org.acme.trading` (our Commodity Trading business network) has no business network ACLS defined (just system ones) and therefore access to resources are implicity 'denied'.

#### Rule 1a - Trader profile restriction rule

First up - rule to restrict Traders to only see and update their own record.

1. Switch identity to `tid1` (click the current identity top right and choose ID Registry, select to 'use now' for `tid`) - and click on the 'Test' tab
2. Confirm that you do not see any Trader records.
3. Switch identity to the 'admin' user (top right, 'ID Registry'), then go to the 'Define'  tab and click on 'Access Control' (`permissions.acl`) on the left.
4. Paste the following rule in line 1 in your edit session, pasted above the existing 3 'System' and 'Network' system rules:

```
rule R1a_TraderSeeUpdateThemselvesOnly {
  description: "Trader can see and update their own record only"
  participant(t): "org.acme.trading.Trader"
  operation: READ, UPDATE
  resource(v): "org.acme.trading.Trader"
  condition: (v.getIdentifier() == t.getIdentifier())
  action: ALLOW
}
```
Then click on the **UPDATE** button on the bottom left to update the business network. 

This rule will allow the `current` Participant(t) (mapped to the `current` identity whether in playground (here) or indeed in your application) to READ and UPDATE their own target Trader record(v).

5. **TEST THE ACL**: Switch user to identity `tid1` (top right, 'ID Registry') and click on the 'Test' tab - check that TRADER1 record only, is visible to this identity.

#### Rule 1b - Trader Asset Ownership - allow update by owners only

By default, a Trader cannot see or update any of the Commodities created earlier. 

We need a rule to enable a Trader access Commodities for which they are the designated 'owner'.

1. Switch identity to `tid1` (click the current identity top right and choose ID Registry, select to 'use now' for `tid`) - and click on the 'Test' tab
2. Confirm that you do not see any Commodity records.
3. Switch identity back to the 'admin' user (top right, 'ID Registry'), then go to the 'Define'  tab and click on 'Access Control' (`permissions.acl`) on the left.
4. Paste the following rule in line 1 in your edit session, pasted above the existing rules:

```
rule R1b_TraderSeeTheirCommodities {
  description: "Trader can see/work with their own Commodities"
  participant(t): "org.acme.trading.Trader"
  operation: ALL
  resource(c): "org.acme.trading.Commodity"
  condition: (c.owner.getIdentifier() == t.getIdentifier())
  action: ALLOW
}

```
Then click on the **UPDATE** button on the bottom left to update the business network. 

This rule will allow the `current` Trader Participant(t) all operations on target Commodities(c) resources or record(v) that it 'owns'.

5. **TEST THE ACL**: Switch user to identity `tid1` (top right, 'ID Registry') and click on the 'Test' tab - confirm that there is one Commodity owned by TRADER1 participant and is visible/editable (icon) to this identity.

Implicitly, this Trader TRADER1 has no ability to see or update other Trader's assets (Commodities) at this point - we don't need a rule for this, but there may in the real world be a business policy to allow specific senior Traders to 'see' other Commodities, albeit they are not owners for same.

#### Rule 2 - Restrictive rule: Only 'Trader' participants can submit `Trade` smart contract transactions

By default, a Trader cannot submit a `Trade` transaction (defined in our model and for which we have smart contract logic written in our Script file) to update a Commodity he owns. 

We need a rule to enable a Trader to submit `Trade` transactions for which they are the designated 'owner'. The `Trade` transaction enables the current owner to change the ownership to another Trader.

1. Switch identity to `tid1` (click the current identity top right and choose ID Registry, select to 'use now' for `tid`) - and click on the 'Test' tab
2. Confirm that you cannot submit a `Trade` transaction ('Submit Transaction') to try change the ownership of a Commodity - you will get a message that you don't not have `CREATE` ability to do submit the transaction.
3. Switch identity back to the 'admin' user (top right, 'ID Registry'), then go to the 'Define'  tab and click on 'Access Control' (`permissions.acl`) on the left.
4. Paste the following rule in line 1 in your edit session, pasted above the existing rules:

```
rule R2_EnableTradeTxn {
    description: "Enable Traders to submit transactions"
    participant: "org.acme.trading.Trader"
    operation: ALL
    resource: "org.acme.trading.Trade"
    action: ALLOW

```

Then click on the **UPDATE** button on the bottom left to update the business network. 

That's it. We know already that the participant can only work with their own Commodity(ies). This will allow only Trader participants to submit 
transactions of type `Trade`.


5. **TEST THE ACL**: Switch user to identity `tid1` (top right, 'ID Registry') - the owner of Commodity with id `CC`

a. Click on the 'Test' tab. Submit a `Trade` Transaction copying and pasting this transaction, replacing current contents.

```
{
  "$class": "org.acme.trading.Trade",
  "commodity": "resource:org.acme.trading.Commodity#CC",
  "newOwner": "resource:org.acme.trading.Trader#TRADER2"
}
```
b. Confirm that the transaction has now been submitted by going to 'All Transactions' (on the left) and the first record in the Historian shows a `TRADE` transaction confirms the transfer. By contrast, a switch to identity `tid2` will reveal it has two Commodity records.


#### Rule 3 - Enabling rule: Allow Traders to see their own historical records only

By default, due to the System ACLs (a part of which is the registry for the Historian record), each Trader (eg. tid1, tid2 identities) can see the history of all Transactions - an example is the `UpdateBusinessNetwork` performed by admin.

We will lock down access to the Historian such that Traders only see their own, business-related activities in Historian.

1. Switch identity to `tid3` (click the current identity top right and choose ID Registry, select to 'use now' for `tid`) - and click on the 'Test' tab
2. Confirm that you can see transactions relating to 'system' activities, but also the other traders (TRADER1 and TRADER2).
3. Switch identity back to the 'admin' user (top right, 'ID Registry'), then go to the 'Define'  tab and click on 'Access Control' (`permissions.acl`) on the left.
4. Paste the following rule in line 1 in your edit session, pasted above the existing rules:

```
rule R3_TradersSeeOwnHistoryOnly {
  description: "Traders should be able to see the history of their own transactions only"
  participant(t): "org.acme.trading.Trader"
  operation: READ
  resource(v): "org.hyperledger.composer.system.HistorianRecord"
  condition: (v.participantInvoking.getIdentifier() != t.getIdentifier())
  action: DENY
}
```
This rule restricts the current Trader participant to seeing only transactions he/she invoked in Composer.

Then click on the **UPDATE** button on the bottom left to update the business network. 

5. **TEST THE ACL**: 
a. Switch user to identity `tid3` (top right, 'ID Registry') - you will only see 'Identity Activation' type entries but nothing about the history of transactions that were submitted relating to TRADER1 and TRADER2. This is what we would expect. 

b. Next, switch to identity `tid1` - you will see the history of transactions (such as the 'TRADE' transaction) relating to `tid1` only - in particular the transfer of Commodity 'CC' ownership to TRADER2 (Identity `tid2` will likewise see the historial transaction).

a. Click on the 'Test' tab. Submit a `Trade` Transaction copying and pasting this transaction, replacing current contents.

